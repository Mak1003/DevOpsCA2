{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "824012a2",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-09-28T11:12:21.028024Z",
     "iopub.status.busy": "2025-09-28T11:12:21.027662Z",
     "iopub.status.idle": "2025-09-28T11:12:22.995626Z",
     "shell.execute_reply": "2025-09-28T11:12:22.994379Z"
    },
    "papermill": {
     "duration": 1.972568,
     "end_time": "2025-09-28T11:12:22.997055",
     "exception": false,
     "start_time": "2025-09-28T11:12:21.024487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e9/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e9/train.csv\n",
      "/kaggle/input/playground-series-s5e9/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1c04c5c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-09-28T11:12:23.002267Z",
     "iopub.status.busy": "2025-09-28T11:12:23.001909Z",
     "iopub.status.idle": "2025-09-28T11:13:55.636987Z",
     "shell.execute_reply": "2025-09-28T11:13:55.636088Z"
    },
    "papermill": {
     "duration": 92.639444,
     "end_time": "2025-09-28T11:13:55.638419",
     "exception": false,
     "start_time": "2025-09-28T11:12:22.998975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train shape: (524164, 11)\n",
      "Test shape: (174722, 10)\n",
      "Sample submission shape: (174722, 2)\n",
      "\n",
      "Train columns: ['id', 'RhythmScore', 'AudioLoudness', 'VocalContent', 'AcousticQuality', 'InstrumentalScore', 'LivePerformanceLikelihood', 'MoodScore', 'TrackDurationMs', 'Energy', 'BeatsPerMinute']\n",
      "\n",
      "Missing values:\n",
      " id                 0\n",
      "RhythmScore        0\n",
      "AudioLoudness      0\n",
      "VocalContent       0\n",
      "AcousticQuality    0\n",
      "dtype: int64\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n",
      "  with pd.option_context('mode.use_inf_as_na', True):\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of features: 10\n",
      "\n",
      "Training LightGBM...\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021429 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2550\n",
      "[LightGBM] [Info] Number of data points in the train set: 419331, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 119.056554\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020536 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2550\n",
      "[LightGBM] [Info] Number of data points in the train set: 419331, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 119.039042\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.020362 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2550\n",
      "[LightGBM] [Info] Number of data points in the train set: 419331, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 119.033031\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.052521 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2550\n",
      "[LightGBM] [Info] Number of data points in the train set: 419331, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 119.023957\n",
      "[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.021166 seconds.\n",
      "You can set `force_col_wise=true` to remove the overhead.\n",
      "[LightGBM] [Info] Total Bins 2550\n",
      "[LightGBM] [Info] Number of data points in the train set: 419332, number of used features: 10\n",
      "[LightGBM] [Info] Start training from score 119.021913\n",
      "LightGBM CV RMSE: 26.459250329119605\n",
      "\n",
      "Training XGBoost...\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `eval_metric` in `fit` method is deprecated for better compatibility with scikit-learn, use `eval_metric` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.11/dist-packages/xgboost/sklearn.py:889: UserWarning: `early_stopping_rounds` in `fit` method is deprecated for better compatibility with scikit-learn, use `early_stopping_rounds` in constructor or`set_params` instead.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost CV RMSE: 26.463009573455334\n",
      "\n",
      "Training CatBoost...\n",
      "CatBoost CV RMSE: 26.460985755907693\n",
      "\n",
      "Final Stacked RMSE: 26.45879938726669\n",
      "\n",
      "Submission file saved as submission.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>BeatsPerMinute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>524164</td>\n",
       "      <td>119.475473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>524165</td>\n",
       "      <td>118.805102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>524166</td>\n",
       "      <td>119.651453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>524167</td>\n",
       "      <td>119.437774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>524168</td>\n",
       "      <td>119.747742</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  BeatsPerMinute\n",
       "0  524164      119.475473\n",
       "1  524165      118.805102\n",
       "2  524166      119.651453\n",
       "3  524167      119.437774\n",
       "4  524168      119.747742"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# =========================\n",
    "# Kaggle Playground Series S5E9 - Predict BPM of Songs\n",
    "# End-to-End Notebook (Kaggle Environment)\n",
    "# =========================\n",
    "\n",
    "# 1. Libraries\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "import lightgbm as lgb\n",
    "import xgboost as xgb\n",
    "from catboost import CatBoostRegressor\n",
    "\n",
    "# 2. Load Data\n",
    "train = pd.read_csv(\"../input/playground-series-s5e9/train.csv\")\n",
    "test = pd.read_csv(\"../input/playground-series-s5e9/test.csv\")\n",
    "sample_sub = pd.read_csv(\"../input/playground-series-s5e9/sample_submission.csv\")\n",
    "\n",
    "print(\"Train shape:\", train.shape)\n",
    "print(\"Test shape:\", test.shape)\n",
    "print(\"Sample submission shape:\", sample_sub.shape)\n",
    "\n",
    "# 3. Quick EDA\n",
    "print(\"\\nTrain columns:\", train.columns.tolist())\n",
    "print(\"\\nMissing values:\\n\", train.isna().sum().sort_values(ascending=False).head())\n",
    "\n",
    "# Target distribution\n",
    "sns.histplot(train[\"BeatsPerMinute\"], bins=50, kde=True)\n",
    "plt.title(\"Distribution of Target (BeatsPerMinute)\")\n",
    "plt.show()\n",
    "\n",
    "# 4. Prepare Features\n",
    "TARGET = \"BeatsPerMinute\"\n",
    "ID_COL = \"ID\"\n",
    "\n",
    "X = train.drop([TARGET], axis=1)\n",
    "y = train[TARGET]\n",
    "X_test = test.copy()\n",
    "\n",
    "# Drop ID if present\n",
    "if ID_COL in X.columns:\n",
    "    X = X.drop(ID_COL, axis=1)\n",
    "    X_test = X_test.drop(ID_COL, axis=1)\n",
    "\n",
    "features = X.columns.tolist()\n",
    "print(\"Number of features:\", len(features))\n",
    "\n",
    "# 5. Cross-validation setup\n",
    "kf = KFold(n_splits=5, shuffle=True, random_state=42)\n",
    "\n",
    "# To store predictions\n",
    "oof_lgb, oof_xgb, oof_cat = np.zeros(len(X)), np.zeros(len(X)), np.zeros(len(X))\n",
    "preds_lgb, preds_xgb, preds_cat = np.zeros(len(X_test)), np.zeros(len(X_test)), np.zeros(len(X_test))\n",
    "\n",
    "# 6. LightGBM\n",
    "print(\"\\nTraining LightGBM...\")\n",
    "for fold, (trn_idx, val_idx) in enumerate(kf.split(X, y)):\n",
    "    X_tr, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n",
    "    y_tr, y_val = y.iloc[trn_idx], y.iloc[val_idx]\n",
    "\n",
    "    model = lgb.LGBMRegressor(\n",
    "        n_estimators=10000,\n",
    "        learning_rate=0.05,\n",
    "        max_depth=-1,\n",
    "        subsample=0.8,\n",
    "        colsample_bytree=0.8,\n",
    "        random_state=42\n",
    "    )\n",
    "    model.fit(\n",
    "        X_tr, y_tr,\n",
    "        eval_set=[(X_val, y_val)],\n",
    "        eval_metric=\"rmse\",\n",
    "        callbacks=[lgb.early_stopping(stopping_rounds=100, verbose=False)]\n",
    "    )\n",
    "\n",
    "    oof_lgb[val_idx] = model.predict(X_val)\n",
    "    preds_lgb += model.predict(X_test) / kf.n_splits\n",
    "\n",
    "print(\"LightGBM CV RMSE:\", mean_squared_error(y, oof_lgb, squared=False))\n",
    "\n",
    "# 7. XGBoost\n",
    "print(\"\\nTraining XGBoost...\")\n",
    "for fold, (trn_idx, val_idx) in enumerate(kf.split(X, y)):\n",
    "    X_tr, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n",
    "    y_tr, y_val = y.iloc[trn_idx], y.iloc[val_idx]\n",
    "\n",
    "    model = xgb.XGBRegressor(\n",
    "        n_estimators=10000,\n",
    "        learning_rate=0.05,\n",
    "        max_depth=8,\n",
    "        subsample=0.8,\n",
    "        colsample_bytree=0.8,\n",
    "        random_state=42,\n",
    "        tree_method=\"hist\"\n",
    "    )\n",
    "    model.fit(\n",
    "        X_tr, y_tr,\n",
    "        eval_set=[(X_val, y_val)],\n",
    "        eval_metric=\"rmse\",\n",
    "        early_stopping_rounds=100,\n",
    "        verbose=False\n",
    "    )\n",
    "\n",
    "    oof_xgb[val_idx] = model.predict(X_val)\n",
    "    preds_xgb += model.predict(X_test) / kf.n_splits\n",
    "\n",
    "print(\"XGBoost CV RMSE:\", mean_squared_error(y, oof_xgb, squared=False))\n",
    "\n",
    "# 8. CatBoost\n",
    "print(\"\\nTraining CatBoost...\")\n",
    "for fold, (trn_idx, val_idx) in enumerate(kf.split(X, y)):\n",
    "    X_tr, X_val = X.iloc[trn_idx], X.iloc[val_idx]\n",
    "    y_tr, y_val = y.iloc[trn_idx], y.iloc[val_idx]\n",
    "\n",
    "    model = CatBoostRegressor(\n",
    "        iterations=10000,\n",
    "        learning_rate=0.05,\n",
    "        depth=8,\n",
    "        random_seed=42,\n",
    "        loss_function=\"RMSE\",\n",
    "        verbose=False\n",
    "    )\n",
    "    model.fit(X_tr, y_tr, eval_set=(X_val, y_val), early_stopping_rounds=100)\n",
    "\n",
    "    oof_cat[val_idx] = model.predict(X_val)\n",
    "    preds_cat += model.predict(X_test) / kf.n_splits\n",
    "\n",
    "print(\"CatBoost CV RMSE:\", mean_squared_error(y, oof_cat, squared=False))\n",
    "\n",
    "# 9. Stacking with Ridge\n",
    "stacked_oof = np.vstack([oof_lgb, oof_xgb, oof_cat]).T\n",
    "stacked_preds = np.vstack([preds_lgb, preds_xgb, preds_cat]).T\n",
    "\n",
    "meta_model = Ridge(alpha=1.0)\n",
    "meta_model.fit(stacked_oof, y)\n",
    "\n",
    "final_oof = meta_model.predict(stacked_oof)\n",
    "final_preds = meta_model.predict(stacked_preds)\n",
    "\n",
    "print(\"\\nFinal Stacked RMSE:\", mean_squared_error(y, final_oof, squared=False))\n",
    "\n",
    "# 10. Save Submission\n",
    "submission = sample_sub.copy()\n",
    "submission[\"BeatsPerMinute\"] = final_preds\n",
    "submission.to_csv(\"submission.csv\", index=False)\n",
    "\n",
    "print(\"\\nSubmission file saved as submission.csv\")\n",
    "submission.head()\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13345277,
     "sourceId": 91720,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 101.404326,
   "end_time": "2025-09-28T11:13:56.762549",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-09-28T11:12:15.358223",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
